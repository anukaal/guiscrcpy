
name: Continuous
on: 
  - push

jobs:
  Wheel:
    runs-on: ubuntu-18.04
    steps:
    - uses: actions/checkout@v2

    - uses: actions/setup-python@v1
      with:
        python-version: 3.x

    - name: Build wheel
      run: |
        python -m pip install wheel twine
        python setup.py bdist_wheel
        export VERSION=$(ls dist)
        
    - name: Upload artifact
      uses: actions/upload-artifact@v1.0.0
      with:
        name: guiscrcpy-continuous-none-any-py3.whl
        path: dist/${{ env.VERSION }}

    - name: Publish distribution ðŸ“¦ to Test PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: twine upload dist/*

  AppImage:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        type: ['r', 'm']
        container: ['ubuntu:18.04', 'ubuntu:16.04'] # r: full or m: minimal
        exclude:
          - type: 'r'
            container: 'ubuntu:16.04'
          - type: 'm'
            container: 'ubuntu:18.04'
    container:
      image: ${{ matrix.container }}
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      
      - name: Install dependencies
        run: |
          sed -i 's,qtpy,PySide2,g' **/*.py
          docker build -t guiscrcpy-pyappimage-build -f scripts/ci/pyappimage/Dockerfile
          docker run -v $(pwd):/usr/src guiscrcpy-pyappimage-build

      - name: Create Standalone scrcpy
        if: matrix.type == 'm'
        run: |
          export APPIMAGE_EXTRACT_AND_RUN=1
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          cp pyappimage/AppRun.standalone.sh guiscrcpy.AppDir/AppRun
          chmod +x guiscrcpy.AppDir/AppRun
          mv guiscrcpy.AppDir squashfs-root
          export GUISCRCPY_VERSION="$(cat setup.py | grep 'version=' | grep -P -o '\d\.\d\.\d+').dev"
          export GUISCRCPY_GLIB_VERSION="glibc$(ldd --version | grep 'ldd ' | grep -o ').[0-9].[0-9][0-9]' | grep -o '[0-9].[0-9][0-9]')"
          export GUISCRCPY_MACHINE="$(uname -m)"
          export GUISCRCPY_TYPE="m"
          ./appimagetool*.AppImage squashfs-root -n \
            -u 'gh-releases-zsync|srevinsaju|guiscrcpy|continuous|guiscrcpy-*.$GUISCRCPY_TYPE.*.AppImage.zsync' \
            guiscrcpy-min-$GUISCRCPY_VERSION.$GUISCRCPY_TYPE.$GUISCRCPY_GLIB_VERSION-$GUISCRCPY_MACHINE.AppImage
          mkdir dist
          mv guiscrcpy-min-$GUISCRCPY_VERSION.$GUISCRCPY_TYPE.$GUISCRCPY_GLIB_VERSION-$GUISCRCPY_MACHINE.AppImage* dist/.


      - name: Bundle scrcpy
        if: matrix.type == 'r'
        run: |
          export APPIMAGE_EXTRACT_AND_RUN=1
          wget -c $(curl -sL https://api.github.com/repos/srevinsaju/scrcpy-appimage/releases/latest | jq -r '.assets[].browser_download_url')
          chmod +x scrcpy*.AppImage
          ./scrcpy*.AppImage --appimage-extract  
          mv squashfs-root scrcpy
          mkdir squashfs-root
          mv scrcpy squashfs-root/.
          wget https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage
          chmod +x appimagetool-x86_64.AppImage
          ARCH=x86_64 ./appimagetool*.AppImage -n guiscrcpy.AppDir
          ./guiscrcpy*.AppImage --appimage-extract
          export GUISCRCPY_VERSION="$(cat setup.py | grep 'version=' | grep -P -o '\d\.\d\.\d+').dev"
          export GUISCRCPY_GLIB_VERSION="glibc$(ldd --version | grep 'ldd ' | grep -o ').[0-9].[0-9][0-9]' | grep -o '[0-9].[0-9][0-9]')"
          export GUISCRCPY_MACHINE="$(uname -m)"
          export GUISCRCPY_TYPE="r"
          ./appimagetool*.AppImage squashfs-root -n \
            -u 'gh-releases-zsync|srevinsaju|guiscrcpy|continuous|guiscrcpy-*.$GUISCRCPY_TYPE.*.AppImage.zsync' \
            guiscrcpy-$GUISCRCPY_VERSION.$GUISCRCPY_TYPE.$GUISCRCPY_GLIB_VERSION-$GUISCRCPY_MACHINE.AppImage
          mkdir dist
          mv guiscrcpy-$GUISCRCPY_VERSION.$GUISCRCPY_TYPE.$GUISCRCPY_GLIB_VERSION-$GUISCRCPY_MACHINE.AppImage* dist/.

      - name: Install Destop Environment
        run: |
          echo "adapted from https://github.com/AppImage/appimage.github.io/blob/master/.travis.yml"
          sudo apt-get update
          sudo apt-get -qq -y install imagemagick libasound2-dev pulseaudio-utils alsa-utils alsa-oss libjack0 desktop-file-utils xmlstarlet xterm xvfb icewm x11-utils x11-apps netpbm xdotool libgl1-mesa-dri libgl1-mesa-dev mesa-utils libosmesa6 libsdl1.2-dev fonts-wqy-microhei libfile-mimeinfo-perl libx11-xcb1 libxcb-xkb1 libxcb-* libxcb-render-util0 libxkbcommon-x11-0 libxkbcommon0 > /dev/null # appstream # TODO: Cache me!
          mkdir $HOME/.icewm/
          echo "ShowTaskBar = 0" > $HOME/.icewm/preferences
          echo "TaskBarAutoHide = 1" > $HOME/.icewm/preferences
          echo "TaskBarShowWorkspaces = 0" > $HOME/.icewm/preferences
          echo "TaskBarShowAllWindows = 0" > $HOME/.icewm/preferences
          echo "TaskBarShowClock = 0" > $HOME/.icewm/preferences
          echo "TaskBarShowMailboxStatus = 0" > $HOME/.icewm/preferences
          echo "TaskBarShowCPUStatus = 0" > $HOME/.icewm/preferences
          echo "TaskBarShowWindowListMenu = 0" > $HOME/.icewm/preferences

      - name: Run headless test
        if: matrix.type == 'r'
        run: |
          export LC_ALL=C.UTF-8
          export LANG=C.UTF-8
          export APPIMAGE_EXTRACT_AND_RUN=1
          chmod +x scripts/display-ci.sh
          echo "echo Dummy scrcpy" | sudo tee -a /usr/bin/scrcpy
          sudo chmod +x /usr/bin/scrcpy
          /usr/bin/xvfb-run --auto-servernum ./scripts/display-ci.sh "$(realpath dist/*.AppImage)"

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: guiscrcpy-${{ matrix.type }}-continuous-x86_64.AppImage
          path: 'dist/'


  Windows:
    name: Windows
    runs-on: windows-latest
    strategy: 
      matrix:
        arch: ['x64', 'x86']
        qt: ['PyQt5', 'PySide2']
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: ${{ matrix.arch }}

      - name: Patch PySide2
        if: matrix.qt == 'PySide2'
        run: |
          sed -i 's,PyQt5,PySide2,g' requirements.txt
          sed -i 's,PyQt5,PySide2,g' setup.py

      - name: Install dependencies
        run: |
          pip3 install --upgrade pip
          pip3 install --upgrade setuptools wheel
          pip3 install PyInstaller
          pip3 install -r requirements.txt
          pip3 install . 
          echo Done
          
      - name: Create .exe
        run: |
          echo "from guiscrcpy.cli import cli; cli()" > entry.py
          python -m PyInstaller -n guiscrcpy-${{ matrix.qt }}-${{ matrix.arch }} .\entry.py --onefile -i guiscrcpy\ui\icons\guiscrcpy_logo_SRj_icon.ico

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: guiscrcpy-${{ matrix.qt }}-${{ matrix.arch }}-continuous.exe
          # Directory containing files to upload
          path: dist


  MacOS:
    name: MacOS
    runs-on: macos-latest
    strategy: 
      matrix:
        arch: ['x64']
        qt: ['PySide2']
    steps:
      - name: Checkout
        uses: actions/checkout@v1

      - name: Setup Python
        uses: actions/setup-python@v1
        with:
          python-version: '3.x'
          architecture: ${{ matrix.arch }}

      - name: Patch PySide2
        if: matrix.qt == 'PySide2'
        run: |
          brew install gnu-sed
          gsed -i 's,PyQt5,PySide2,g' requirements.txt
          gsed -i 's,PyQt5,PySide2,g' setup.py

      - name: Install dependencies
        run: |
          pip3 install --upgrade pip
          pip3 install --upgrade setuptools wheel
          pip3 install PyInstaller
          pip3 install -r requirements.txt
          pip3 install . 
          echo Done
          
      - name: Create .exe
        run: |
          echo "from guiscrcpy.cli import cli; cli()" > entry.py
          python -m PyInstaller -n guiscrcpy-${{ matrix.qt }}-${{ matrix.arch }} ./entry.py --onefile -i guiscrcpy/ui/icons/guiscrcpy_logo_SRj_icon.ico --osx-bundle-identifier 'io.github.srevinsaju.guiscrcpy' --windowed

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          # Artifact name
          name: guiscrcpy-${{ matrix.qt }}-${{ matrix.arch }}-continuous.app
          # Directory containing files to upload
          path: dist


  Release:
    needs: [Windows, AppImage, Wheel, MacOS]
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [3.8]

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-PyQt5-x86-continuous.exe
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-PyQt5-x64-continuous.exe
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-PySide2-x86-continuous.exe
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-PySide2-x64-continuous.exe
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-PySide2-x64-continuous.app
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-continuous-none-any-py3.whl
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-r-continuous-x86_64.AppImage
    - uses: actions/download-artifact@v1
      with:
        name: guiscrcpy-m-continuous-x86_64.AppImage

    - name: Detect Release type
      if: github.ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/v') != true
      run: |
        echo "::set-env release_tag=continuous"

    - name: PreRelease
      uses: marvinpinto/action-automatic-releases@latest
      if: github.ref == 'refs/heads/master' && startsWith(github.ref, 'refs/tags/') != true
      with:
        prerelease: true
        draft: false
        automatic_release_tag: continuous
        title: continuous
        files: |
          guiscrcpy-PyQt5-x86-continuous.exe
          guiscrcpy-PyQt5-x64-continuous.exe
          guiscrcpy-PySide2-x86-continuous.exe
          guiscrcpy-PySide2-x64-continuous.exe
          guiscrcpy-PySide2-x64-continuous.app
          guiscrcpy-continuous-none-any-py3.whl
          guiscrcpy-m-continuous-x86_64.AppImage
          guiscrcpy-r-continuous-x86_64.AppImage

        repo_token: ${{ secrets.GITHUB_TOKEN }}

    - name: Release
      uses: marvinpinto/action-automatic-releases@latest
      if: startsWith(github.ref, 'refs/tags/v')
      with:
        prerelease: false
        draft: true
        files: |
          guiscrcpy-PyQt5-x86-continuous.exe
          guiscrcpy-PyQt5-x64-continuous.exe
          guiscrcpy-PySide2-x86-continuous.exe
          guiscrcpy-PySide2-x64-continuous.exe
          guiscrcpy-PySide2-x64-continuous.app
          guiscrcpy-continuous-none-any-py3.whl
          guiscrcpy-m-continuous-x86_64.AppImage
          guiscrcpy-r-continuous-x86_64.AppImage

        repo_token: ${{ secrets.GITHUB_TOKEN }}
